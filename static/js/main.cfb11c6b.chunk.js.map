{"version":3,"sources":["AppBar.js","BigTextField.js","MiddleColumn.js","Translator.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","OutlinedTextFields","state","multiline","handleChange","name","event","_this","setState","Object","defineProperty","target","value","this","TextField_default","id","label","fullWidth","rows","defaultValue","textField","margin","InputProps","input","heightStyle","React","Component","theme","spacing","unit","MiddleColumn","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Grid_default","container","alignItems","item","xs","Button_default","CenteredGrid","fieldHeight","window","innerHeight","updateDimensions","addEventListener","bind","removeEventListener","_this2","HeightedBigTextField","height","BigTextField","style","padding","justify","src_MiddleColumn","App","src_AppBar","Translator","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfb11c6b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 0,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nfunction ButtonAppBar(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Yeetify\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nButtonAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ButtonAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = theme => ({\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  }\n});\n\nclass OutlinedTextFields extends React.Component {\n  state = {\n    multiline: 'Controlled',\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n        <TextField\n          id=\"outlined-multiline-static\"\n          label={this.props.label}\n          multiline\n          fullWidth\n          rows={2}\n          defaultValue=\"\"\n          className={classes.textField}\n          margin=\"normal\"\n          variant=\"outlined\"\n          InputProps={{ classes: { input: classes.heightStyle } }}\n        />\n    );\n  }\n}\n\nOutlinedTextFields.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(OutlinedTextFields);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nclass MiddleColumn extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <Grid container alignItems=\"center\" spacing={24}>\n                <Grid item xs={12}>\n                    <Button fullWidth variant=\"contained\" color=\"primary\">Yeet &gt;</Button>\n                </Grid>\n                <Grid item xs={12}>\n                    <Button fullWidth variant=\"contained\" color=\"secondary\">&lt; Deyeet</Button>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nMiddleColumn.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default MiddleColumn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport BigTextField from './BigTextField';\nimport MiddleColumn from './MiddleColumn';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  }\n});\n\nclass CenteredGrid extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            fieldHeight:  0,\n        }\n    }\n\n    /**\n     * Calculate & Update state of new dimensions\n     */\n    updateDimensions() {\n        this.setState({fieldHeight: window.innerHeight - 168});\n    }\n\n    /**\n     * Add event listener\n     */\n    componentDidMount() {\n        this.updateDimensions();\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    }\n\n    /**\n     * Remove event listener\n     */\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n    }\n\n    render() {\n        const { classes } = this.props;\n        const heightStyler = theme => ({\n            heightStyle:{\n                height:this.state.fieldHeight,\n            },\n        });\n        const HeightedBigTextField = withStyles(heightStyler)(BigTextField); // TODO: Hacky but it works\n        return (\n            <div className={classes.root} style={{padding: 20}}>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={24}>\n                <Grid item xs={5}>\n                <HeightedBigTextField label={\"Code Here\"}/>\n                </Grid>\n                <Grid item xs={2}>\n                    <MiddleColumn />\n                </Grid>\n                <Grid item xs={5}>\n                    <HeightedBigTextField label={\"Yeeted Result\"}/>\n                </Grid>\n            </Grid>\n            </div>\n        );\n    }\n}\n\nCenteredGrid.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CenteredGrid);\n","import React from 'react';\nimport './App.css';\n\nimport AppBar from './AppBar';\nimport Translator from './Translator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <Translator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}